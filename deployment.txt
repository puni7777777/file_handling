Add a homepage property to the package.json file

    Open the package.json file in a text editor.

    $ vi package.json

    In this tutorial, the text editor I'll be using is vi. You can use any text editor you want; for example, Visual Studio Code.

Add a homepage property in this format*: https://{username}.github.io/{repo-name}

    * For a project site, that's the format. For a user site, the format is: https://{username}.github.io. You can read more about the homepage property in the "GitHub Pages" section of the create-react-app documentation.

{
  "name": "my-app",
  "version": "0.1.0",
+ "homepage": "https://gitname.github.io/react-gh-pages",
  "private": true,
At this point, the React app's package.json file includes a property named homepage.
5. Add deployment scripts to the package.json file

    Open the package.json file in a text editor (if it isn't already open in one).

    $ vi package.json

Add a predeploy property and a deploy property to the scripts object:

"scripts": {
+   "predeploy": "npm run build",
+   "deploy": "gh-pages -d build",
    "start": "react-scripts start",
    "build": "react-scripts build",
 Add a "remote" that points to the GitHub repository

    Add a "remote" to the local Git repository.

    You can do that by issuing a command in this format:

    $ git remote add origin https://github.com/{username}/{repo-name}.git

    To customize that command for your situation, replace {username} with your GitHub username and replace {repo-name} with the name of the GitHub repository you created in Step 1.

    In my case, I'll run:

    $ git remote add origin https://github.com/gitname/react-gh-pages.git

        That command tells Git where I want it to push things whenever Iâ€”or the gh-pages npm package acting on my behalfâ€”issue the $ git push command from within this local Git repository.

At this point, the local repository has a "remote" whose URL points to the GitHub repository you created in Step 1.
7. Push the React app to the GitHub repository

    Push the React app to the GitHub repository

    $ npm run deploy


        That will cause the predeploy and deploy scripts defined in package.json to run.

        Under the hood, the predeploy script will build a distributable version of the React app and store it in a folder named build. Then, the deploy script will push the contents of that folder to a new commit on the gh-pages branch of the GitHub repository, creating that branch if it doesn't already exist.

        By default, the new commit on the gh-pages branch will have a commit message of "Updates". You can specify a custom commit message via the -m option, like this:

        $ npm run deploy -- -m "Deploy React app to GitHub Pages"

At this point, the GitHub repository contains a branch named gh-pages, which contains the files that make up the distributable version of the React app. However, we haven't configured GitHub Pages to serve those files yet.
8. Configure GitHub Pages

    Navigate to the GitHub Pages settings page
        In your web browser, navigate to the GitHub repository
        Above the code browser, click on the tab labeled "Settings"
        In the sidebar, in the "Code and automation" section, click on "Pages"
    Configure the "Build and deployment" settings like this:
        Source: Deploy from a branch
        Branch:
            Branch: gh-pages
            Folder: / (root)
    Click on the "Save" button

That's it! The React app has been deployed to GitHub Pages! ðŸš€